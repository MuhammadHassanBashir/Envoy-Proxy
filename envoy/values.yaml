replicaCount: 3

podDisruptionBudget: |
  maxUnavailable: 1

## ref: https://pracucci.com/graceful-shutdown-of-kubernetes-pods.html
terminationGracePeriodSeconds: 30

strategy: |
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 2
    maxUnavailable: 1

image:
  repository: envoyproxy/envoy
  tag: v1.26.0
  ## ^ ref: https://github.com/envoyproxy/envoy/commit/d920944aed67425f91fc203774aebce9609e5d9a
  pullPolicy: IfNotPresent

command:
  - /usr/local/bin/envoy
args:
  - -c
  - /etc/envoy/envoy.yaml
## Client service.
service:
  enabled: true
  ## Service name is user-configurable for maximum service discovery flexibility.
  name: envoy
  type: LoadBalancer
  annotations: {}
    ## AWS example for use with LoadBalancer service type.
    # external-dns.alpha.kubernetes.io/hostname: envoy.cluster.local
    # service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    # service.beta.kubernetes.io/aws-load-balancer-internal: "true"
  ports:
    n0:
      port: 10000
      targetPort: n0
      protocol: TCP

ports:
  admin:
    containerPort: 9901
    protocol: TCP
  n0:
    containerPort: 10000
    protocol: TCP

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

priorityClassName: ""

nodeSelector: {}

tolerations: []

affinity: {}
  # podAntiAffinity:
  #   preferredDuringSchedulingIgnoredDuringExecution:
  #     - weight: 50
  #       podAffinityTerm:
  #         topologyKey: failure-domain.beta.kubernetes.io/zone
  #         labelSelector:
  #           matchLabels:
  #             release: envoy
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     - weight: 40
  #       topologyKey: "kubernetes.io/hostname"
  #       labelSelector:
  #         matchLabels:
  #           release: envoy

## ref: https://github.com/envoyproxy/envoy/pull/2896
podAnnotations: {}
  # prometheus.io/scrape: "true"
  # prometheus.io/path: "/stats/prometheus"
  # prometheus.io/port: "9901"

podLabels: {}
  # team: "developers"
  # service: "envoy"

livenessProbe:
  tcpSocket:
    port: admin
  initialDelaySeconds: 30
  # periodSeconds: 10
  # timeoutSeconds: 5
  # failureThreshold: 3
  # successThreshold: 1

readinessProbe:
  tcpSocket:
    port: admin
  initialDelaySeconds: 30
  # periodSeconds: 10
  # timeoutSeconds: 5
  # failureThreshold: 3
  # successThreshold: 1

securityContext: {}

env: {}

## Create secrets out-of-band from Helm like this:
##
## $ kubectl create secret generic envoy --from-file=./some-secret.txt
##
secretMounts: {}
  # secret:
  #   secretName: envoy
  #   mountPath: /secret
  #   defaultMode: 256  # 256 in base10 == 0400 in octal

files:
  envoy.yaml: |
    admin:
      access_log_path: /dev/stdout
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901

    static_resources:
      listeners:
        - name: listener_0
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 10000
          filter_chains:
            - filters:
                # SET FILTER FOR HTTPCONNECTION MANAGER
                - name: envoy.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    access_log:
                      - name: envoy.file_access_log
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                          path: /dev/stdout
                    stat_prefix: ingress_http
                    # SET TO ALLOW HTTP/1.1 AND HTTP/2 PROTOCAL
                    codec_type: AUTO
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: local_service
                          domains: ["*"]
                          #SET CORS GLOBALLY ROUTING
                          typed_per_filter_config:
                            envoy.filters.http.cors:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.CorsPolicy
                              allow_origin_string_match:
                              - safe_regex:
                                  regex: ".*"
                              allow_headers: "content-type,x-grpc-web"
                              allow_methods: "GET, POST, OPTIONS"
                              expose_headers: "custom-header-1,custom-header-2"
                              max_age: "3600"
                              allow_credentials: true                                             
                          routes:        
                            - match:              # MATCHING PREFIX AND REFERRING TO BACKEND CLUSTER
                                prefix: "/"         
                              route:
                                host_rewrite_literal: envoy.disearch.ai
                                cluster: frontend_service     # REFERRING TO BACKEND CLUSTER
                              # SET CORS FOR SPECFIC ROUTE   
                              typed_per_filter_config:
                                envoy.filters.http.cors:
                                  "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.CorsPolicy
                                  allow_origin_string_match:
                                  - exact: "http://test-origin-1.com"
                                  - exact: "http://test-host-2.com"
                                  allow_headers: "content-type"
                                  allow_methods: "POST"
                                  max_age: "100"   
                          # FOR DDOS AND RATE LIMIT PROTECTION       
                          typed_per_filter_config:
                            envoy.filters.http.local_ratelimit:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
                              stat_prefix: http_local_rate_limiter
                              token_bucket:
                                max_tokens: 50
                                tokens_per_fill: 10
                                fill_interval: 30s
                              filter_enabled:
                                runtime_key: local_rate_limit_enabled
                                default_value:
                                  numerator: 100
                                  denominator: HUNDRED
                              filter_enforced:
                                runtime_key: local_rate_limit_enforced
                                default_value:
                                  numerator: 100
                                  denominator: HUNDRED
                              response_headers_to_add:
                                - append_action: OVERWRITE_IF_EXISTS_OR_ADD
                                  header:
                                    key: x-local-rate-limit
                                    value: 'true'
                    http_filters:                             # GLOBAL IMPLEMENTATION
                      # CORS IMPLEMENTATION          
                      - name: envoy.filters.http.cors
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                      # DDOCS AND RATE LIMIT IMPLEMENTATION
                      - name: envoy.filters.http.local_ratelimit
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
                          stat_prefix: http_local_rate_limiter
                      # OWASP RECOMMENDED SECURITY STANDARD  --> IMPLEMENTATION ON SECURITY HEADERS                
                      - name: envoy.filters.http.lua
                        typed_config:
                          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
                          inlineCode: |
                            function envoy_on_response(response_handle)
                              function hasFrameAncestors(rh)
                                s = rh:headers():get("Content-Security-Policy");
                                delimiter = ";";
                                defined = false;
                                for match in (s..delimiter):gmatch("(.-)"..delimiter) do
                                  match = match:gsub("%s+", "");
                                  if match:sub(1, 15)=="frame-ancestors" then
                                    return true;
                                  end
                                end
                                return false;
                              end
                              if not response_handle:headers():get("Content-Security-Policy") then
                                csp = "frame-ancestors none;";
                                response_handle:headers():add("Content-Security-Policy", csp);
                              elseif response_handle:headers():get("Content-Security-Policy") then
                                if not hasFrameAncestors(response_handle) then
                                  csp = response_handle:headers():get("Content-Security-Policy");
                                  csp = csp .. ";frame-ancestors none;";
                                  response_handle:headers():replace("Content-Security-Policy", csp);
                                end
                              end
                              if not response_handle:headers():get("X-Frame-Options") then
                                response_handle:headers():add("X-Frame-Options", "deny");
                              end
                              if not response_handle:headers():get("X-XSS-Protection") then
                                response_handle:headers():add("X-XSS-Protection", "1; mode=block");
                              end
                              if not response_handle:headers():get("X-Content-Type-Options") then
                                response_handle:headers():add("X-Content-Type-Options", "nosniff");
                              end
                              if not response_handle:headers():get("Referrer-Policy") then
                                response_handle:headers():add("Referrer-Policy", "no-referrer");
                              end
                              if not response_handle:headers():get("X-Download-Options") then
                                response_handle:headers():add("X-Download-Options", "noopen");
                              end
                              if not response_handle:headers():get("Strict-Transport-Security") then
                                response_handle:headers():add("Strict-Transport-Security", "max-age=31536000; includeSubDomains");
                              end
                              if response_handle:headers():get("X-Powered-By") then
                                response_handle:headers():remove("X-Powered-By");
                              end
                            end
                      # FORWARDING ROUTE           
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      # BACKEND CLUSTER
      clusters:
        - name: frontend_service
          type: LOGICAL_DNS
          dns_lookup_family: V4_ONLY
          lb_policy: ROUND_ROBIN
          # CIRCUIT BREAKING IMPLEMENTATION FOR DDOS ATTACK
          circuit_breakers:
            thresholds:
              - max_connections: 10000
                max_pending_requests: 1000
                max_requests: 5000
                max_retries: 3
          # LOAD ASSIGNMENT TO BACKEND CLUSTER      
          load_assignment:
            cluster_name: frontend_service
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: nginx-service.default.svc.cluster.local
                          port_value: 80

    layered_runtime:
      layers:
        - name: static_layer
          static_layer:
            envoy:
              resource_limits:
                listener_0:
                  connection_limit: 1000





## Uncomment this section to use helm values to dynamically generate enovy.yaml
# templates:
#   envoy.yaml: |-
#     ## refs:
#     ## - https://www.envoyproxy.io/docs/envoy/latest/start/start#quick-start-to-run-simple-example
#     ## - https://raw.githubusercontent.com/envoyproxy/envoy/master/configs/google_com_proxy.v2.yaml
#     admin:
#       access_log_path: /dev/stdout
#       address:
#         socket_address:
#           address: 0.0.0.0
#           port_value: {{ .Values.ports.admin.containerPort }}

#     static_resources:
#       listeners:
#       - name: listener_0
#         address:
#           socket_address:
#             address: 0.0.0.0
#             port_value: {{ .Values.ports.n0.containerPort }}
#         filter_chains:
#         - filters:
#           - name: envoy.http_connection_manager
#             config:
#               access_log:
#               - name: envoy.file_access_log
#                 config:
#                   path: /dev/stdout
#               stat_prefix: ingress_http
#               route_config:
#                 name: local_route
#                 virtual_hosts:
#                 - name: local_service
#                   domains: ["*"]
#                   routes:
#                   - match:
#                       prefix: "/"
#                     route:
#                       host_rewrite: www.google.com
#                       cluster: service_google
#               http_filters:
#               - name: envoy.router
#       clusters:
#       - name: service_google
#         connect_timeout: 0.25s
#         type: LOGICAL_DNS
#         dns_lookup_family: V4_ONLY
#         lb_policy: ROUND_ROBIN
#         hosts:
#           - socket_address:
#               address: google.com
#               port_value: 443
#         tls_context:
#           sni: www.google.com

## ServiceMonitor consumed by prometheus-operator
serviceMonitor:
  ## If the operator is installed in your cluster, set to true to create a Service Monitor Entry
  enabled: false
  interval: "15s"
  ## Namespace in which the service monitor is created
  # namespace: monitoring
  # Added to the ServiceMonitor object so that prometheus-operator is able to discover it
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
  additionalLabels: {}

## PrometheusRule consumed by prometheus-operator
prometheusRule:
  enabled: false
  ## Namespace in which the prometheus rule is created
  # namespace: monitoring
  ## Define individual alerting rules as required
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#rulegroup
  ##      https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/
  groups:
    upstream-rules:
      enabled: true
      rules:
        high4xxRate:
          enabled: true
          alert: High4xxRate
          expr: sum(rate(envoy_cluster_upstream_rq_xx{response_code_class="4"}[1m])) / sum(rate(envoy_cluster_upstream_rq_xx[1m])) * 100 > 1
          for: 1m
          labels:
            severity: page
          annotations:
            summary: "4xx response rate above 1%"
            description: "The 4xx error response rate for envoy cluster {{ $labels.envoy_cluster_name }} reported a service replication success rate of {{ $value }}% for more than 1 minute."
  ## Added to the PrometheusRule object so that prometheus-operator is able to discover it
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
  additionalLabels: {}

